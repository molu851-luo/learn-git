2023-2-8
learn to use git

###### 使用git ######

cd file              #进入项目文件夹
git init             #初始化，让git帮我们管理文件夹。在项目文件夹中，空白处右键选择git bash here后，在终端输入
git status           #管理--检测当前文件夹下的文件状态。出现的红色文件（Untracked files）。我们的目的是生成版本，如何生成版本呢
git add test.txt     #git管理test.txt文件
git status           #原本红色文件有3个（README.txt  learn-git.py test.txt），现在test.txt为绿色，剩下2个为红色  
		     #三种状态的变化  红色：新增文件/修改了原老文件  -》git add 文件名 .   绿色：git已经管理起来 -》git commit
		      -m '描述信息'  白色：生成的版本
get add .            #让git管理当前文件夹下所有未管理的文件（即git管理当前文件夹下所有文件）
git commit -m 'v1'   #生成版本1，单引号内写描述信息
git status           #文件夹内的文件不见了。表明文件夹内的文件都由git管理起来生成一个版本了

#修改文件后
git status           #修改的文件是红色的
git add .            #将修改的文件提交git，也可以加修改的文件名，只是我偷懒了。
git status           #红色文件变绿色
git commit -m 'v2'   #生成版本2
git log              #打印了提交的版本信息，生成的几个版本

#个人信息配置：用户名、邮箱（第一次安装需要）在git commit的时候会报错 [一次即可]
touch lq.py
git status
git commit -m 'xxx'

##报错提示Please tell me who you are  git config --global user.email "you@exampl.com"
##                                    git config --global user.name "your name"

##执行上述命令后
git log              #会有用户和邮箱信息

#回滚 回到之前的某个版本
git reset --hard 版本号

#回到之前的版本后，后悔了，需要之后的版本，但是git log只可以看到该版本之前的版本
git reflog           #查到所有的版本信息，找到想要的版本，用git reset --hard 版本号 回去即可

git branch           #查看分支
git branch dev       #创建分支
git checkout dev     #切换分支  从master分支切换到dev分支

git checkout master  #切换回master主干
git merge bug        #合并分支（可能产生冲突）  将bug合并回master  注意：切换分支再合并，谁合并给谁
git branch -d bug    #删除bug分支  git branch -d 分支名称

#分支多合并的时候，有时候会产生冲突，去文件手动解决冲突，然后提交
git status && git add . && git commit -m '解决bug以及合并冲突 v4'



###### 工作流 ######
#master只存放稳定的代码，写代码的时候，创建分支dev，稳定后，合并到master上去


###### 基于git-hub做代码托管 ######

#git不是git-hub（代码托管仓库）
#创建仓库时，私有的是付费的，别人不可见；公共的是免费的，开源的，别人可见的
git remote add origin https://github.com/...
git push -u origin main

#如果是新仓库，会失败需要如下操作
git branch -M main
git push -u origin main
#把代码从git-hub拉到本地
git clone 克隆地址




