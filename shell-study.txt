学习shell的目的：
	1、将运维自动化
	2、了解其它更高级编程语言打基础

	测试环境
	staging：与线上一比一的环境
	线上环境
	
	程序的本质--数据+功能--把数据存起来，然后干嘛干嘛，存起来
# day01：shell基础
一 编程与编程语言
shell是一门编程语言，本质就是语言

人-------编程语言------计算机

什么是编程？
	编程就是人把自己想让计算机做事的步骤给翻译下来，可以总结为两个步骤
		1、想清楚做事的步骤
		2、用一种计算机能听懂的语言把做事的步骤翻译下来，然后存入文件

什么是程序？
	一系列代码文件

什么是进程？
	一个程序的运行过程

	也可以这麽说：
		进程就是操作系统拿着计算机硬件去运行应用程序的过程

为何要编程？
	为了让计算机取代人力，去帮人工作

二 编程语言分类
	机器语言：用二进制指令去编程程序，直接控制计算机硬件
		优点：执行效率高

		缺点：
		    1、哪怕是实现一个简单的功能，需要用到的二进制指令的条数都会非常的多=》编程的复杂度高，即开发效率
		    2、难以记忆，极容易出错

	汇编语言：用英文标签取代二进制指令去编写程序，直接控制计算机硬件
		优点：执行效率也很高，解决机器语言难记的问题
		缺点：
		    1、编写的复杂程度依然很高，开发效率很低

	高级语言：用人类能理解的表达方式去编写程序，计算机无法理解，需要经过翻译计算机才能理解
		编译型（c、go）
		    编译型语言写出的代码-----------》编译器-----------》机器指令
		解释型（shell、python）
		    解释型语言写出的代码-----------》解释器-----------》机器指令

		
		执行效率：机器语言>汇编语言>高级语言
		开发效率：高级语言>汇编语言>高级语言


	计算机硬件（CPU，内存，硬盘）--内核--系统接口层--bash解释器--命令--应用程序
		                      python    --命令--应用程序
				      c语言写的应用程序

三 shell介绍
	一门编程语言
	解释执行该门语言语法的一种应用程序=》shell解释器

四 第一个shell程序
	编写shell程序的两个地方：
		1、解释器的交互环境：
		    优点：可以即时看到代码的运行结果
		    缺点：代码不能永久保存，退出就没了
		
		2、把代码写入文件，该代码文件称之为脚本程序
		    优点：可以永久保存

		>chsh -l    #查看系统支持的bash的解释器
		>ll /bash/sh
		>bash 1.sh
		运行shell程序的三个步骤：
		    1、先运行bash解释器
		    2、bash解释器会将1.sh的内容从硬盘读入内存，此时没有语法意义
		    3、bash解释器会解释执行刚刚读入内存的内容，开始识别语法

五 运行shell脚本的4种方式
	1、绝对路径--权限：①当前用户对沿途的文件夹都有x权限②当前用户对目标文件应该有rx权限--用法：绝对路径即可
	2、相对路径--权限：①当前用户对沿途的文件夹都有x权限②当前用户对目标文件应该有rx权限--用法：必须加上./作为前缀
	3、加上解释器作为前缀--权限：①当前用户对沿途的文件夹都有x权限②当前用户对目标文件应该有r权限---用法；bash 文件路径（绝对路径、相对路径）
	4、用source命令执行或者在路径前加. (.空格)作为前缀--权限：①当前用户对沿途的文件夹都有x权限②当前用户对目标文件应该有r权限
	                                                  --用法：①source 文件路径（绝对路径、相对路径）/ . 文件路径（绝对路径、相对路径）	
	???方式1、2、3都是开启一个子bash

	>ps aux|grep bash
	>ps -elf | grep [b]ash  #可以看到某任务的父进程

	# 注释的规范写法：1）代码上方，#后面跟一个空格，开始写注释 2）代码右边，空2格+#+ （空格），这是规范写法
	# this is ...
	ls  # 查看当前文件夹的文件
	
	调试功能：
	>sh -x 1.sh  # -x有调试功能
	>sh -vx 1.sh  #注释也会打印

	# 只调试部分代码
	set -x
	set +x
	
六 脚本编写规范与建议
	一 脚本编写规范
	1、脚本存放目录需要统一
	2、结尾.sh
	3、脚本开头要有解释器 如#!/bin/bash或者#!/usr/bin/env bash
	4、脚本开头注意加时间、作者、联系邮箱、脚本作用等信息
		# Author luoqing 2023-2-15 version 1 des: sunluoq@163.com
	二 代码编写好习惯
	1、成对的符号尽量一次性写出来，防止遗漏
		例如大括号{}，中括号[]，小括号（），单引号''，双引号""，反引号``等
	2、括号的保留空格习惯  中括号 [] 两端需要留有空格，不然会报错。书写时即可留出空格然后书写内容；如果不知道大括号，中括号，小括号到底那种括号需要两端留空格，可以在书写这些括号的时候两端都保留空格来进行书写，这样可以有效避免因空格导致的各种错误。
	3、流程控制语句一次性书写完成
	4、代码缩进提高可读性

# 复习
	1、程序的组成
	    程序=数据+功能
	2、编程的两个步骤
	    1、步骤
	    2、翻译
	3、计算机完整体系结构
	                        shell脚本程序
	                        命令：ls
	    应用程序：图形界面，bash解释器
	    系统接口
	    内核
	    计算机硬件
	4、shell脚本四种运行方式
	    source 路径
	    文件路径

	5、注释
	    1、对关键代码进行注释说明
	    2、将暂时不想运行的代码注释掉
	6、规范
	    #!/bin/bash
	    #作者信息
	    代码。。。
	7、调试程序
	    sh -x 脚本文件路径
# day2 变量以及变量值的处理
一 变量
	介绍
	原则：先定义，后引用
	删除变量
	变量名的命名规范
	x=1
	变量值有三种来源

	预定义变量
	常量
二 变量值的处理
	基本数据类型
	    整型
	    浮点型
	    字符串
	    数组
	变量值操作

一 变量
	什么是变量？
	    变：事物的状态是会发生变化的
	    量：记录事物的状态
	    变量是一种存取内存的机制
	为何要用变量？
	    是为了让计算机具备人的记录下事物状态的技能
	    并且记录的事物的状态是可以改变的
	如何用变量？
	    原则：先定义、后引用
	        1、定义：
		age=18  # 等号左右两边不能加空格
		2、引用
		$age
		echo $age
		unset age  # 删除变量
		money=3000
		echo $moneyRMB
		echo {$money}RMB  # 用大括号界定变量名的边界
	变量的三大组成部分：
	    1、变量名：用来访问变量值的
	    2、赋值符号：把变量值的内存地址绑定给变量名
	    3、变量值：记录事物的状态--数据
	
	变量名的命名规范：
	    前提：变量名的命名必须见名知意
	    规范：变量名是有字母、数字、下划线组成（age_1=18）。不能以数字开头。不能使用shell的关键字。不要使用中文的变量名。也不要使用拼音。不要带特殊符号。

	变量名的命名风格：
	    1、纯小写字母加下划线
	        age_of_oldboy=18  # 更推荐
	    2、驼峰体
	        AgeOfOldboy=18

	变量值有三种来源
	    1、直接赋值
	        ip="10.0.0.11"
		age=18
		`date "+%F"`--需要重复用--存变量--now_date1=`date "+%F"`--echo $now_date--now_date2=$(date "+%F")
	    2、从脚本的参数获取，即从命令行获取
	        $0 # 当前脚本
		$1 # 第一个参数
		$2 # 第二个参数
		$3
		...
		${10}  # 不要直接$10
		vi nginx.sh
		
		#!/bin/bash
		
		# ;--隔开多条命令
		if [ $1 = "start" ];then
		    echo "nginx is starting..."  # 前面空4个空格，虽然不空也行，但最好空一下
	        elif [ $1 = "stop" ];then
		    echo "nginx is stopping..."
	        elif [ $1 = "restart" ];then
		    echo "nginx is restartting..."
		else
		    echo "Usage: ./nginx.sh start|stop|restart"
		fi
		
		:ZZ

		cat nginx.sh
		chmod +x nginx.sh
		./nginx.sh start
		./nginx.sh stop
		./nginx.sh restart
	    3、与用户交互来获取变量值，即通过键盘输入来获取
	        read -p "请输入您的账号：" name  # read -p 会把用户刚刚输入的内容存为一个值，将该值赋值给name这个变量名
		echo $name  # 打印刚刚输入的内容
		
		案例：

		接收用户输入的账号
		接收用户输入的密码
		判断 输入的用户名 等于 正确的用户名 并且 输的密码等于正确的密码:
		    告诉用户登录成功
		否则
		    告诉用户登录失败

		vi login.sh

		#!/bin/bash
		db_name="egon"
		db_pwd="123"

		read -p "请输入您的账号：" inp_name  # read -p "..." -t 5 name--设置时间，过了5s没输入，就不等待，回到命令行了；read -p "..." -n 2 x--最多读2个字符给赋值给变量名
		read -p "请输入您的密码：" pwd
		if [ $inp_name = $db_name ] && [ $pwd = $db_name ];then
		    echo "登录成功"
		else
		    echo "登录失败"
		fi
		 
		:ZZ
		
		ps：与用户交互
		    接收用户输入：read命令

		    把程序的处理结果反馈给用户：
		      echo命令格式化输出
			  user="egon"
			  age=18
			  echo "my name is $user my age is $age"  # 格式化输出，照着固定的模板

			  案例：
			  ==========egon==========
		  	  年龄：18
			  体重：70
			  身高：181
			  等级：10
			  ========================

		      printf命令的格式化输出
		          printf "my name is %s, my age is %s\n" "egon" 18  # %s代表占位符，s--string，表示一会儿要传一个字符串进来；"egon"传给第一个占位符，18传给第二个占位符；\n换行
			  printf "my name is %s, my age is %d\n" "egon" 18  # %d--输数字
 			  printf "my name is %s, my age is %f\n" "egon" 18.234  # %f--输入浮点数 
 			  printf "my name is %s, my age is %.2f\n" "egon" 18.237  # %.2f--输入的浮点数保留2位小数--18.24 
			  printf "my name is %s, my age is %8.2f\n" "egon" 18.237  # %8.2f--输入的浮点数总有多宽，占8个字符，不够用空格补充 
	 
			  x="egon"
			  y=18
			  printf "my name is %s, my age is %s\n" "$x" $y  # 该代码与上述效果一致

		      除此之外，还可以让打出的代码有颜色，属于是花里胡哨了，对功能没影响，了解即可
		      echo "a\nb"  # echo中的\n不会自动换行，需要加参数-e
  		      echo -e "a\nb" 




